const input = +require('fs').readFileSync('input.txt').toString();

/**
 * 점화식 계산
 * 0의 경우
 * 1. 타일이 아무것도 없는 경우
 *
 * 1가지
 *
 * 2의 경우
 * 1. 상단 ㄱ자 패턴
 * 2. 하단 ㄱ자 패턴
 * 3. 1x2 타일만 사용
 *
 * 3가지
 *
 * 4의 경우
 * 1. 2의 1번에 2의 1, 2, 3 붙이기 => 1 * 3
 * 2. 2의 2번에 2의 1, 2, 3 붙이기 => 1 * 3
 * 3. 2의 3번에 2의 1, 2, 3 붙이기 => 1 * 3
 * 4. 첫번째 줄이 1 x 2 두개로 이루어진 특수 타일 1
 * 5. 마지막 줄이 1 x 2 두개로 이루어진 특수 타일 1
 *
 * 11가지
 *
 * 6의 경우
 *
 * 1. 4의 1번에 2의 1, 2, 3 붙이기 => 3 * 3
 * 2. 4의 2번에 2의 1, 2, 3 붙이기 => 3 * 3
 * 3. 4의 3번에 2의 1, 2, 3 붙이기 => 3 * 3
 * 4. 4의 4번에 2의 1, 2, 3 붙이기 => 1 * 3
 * 5. 4의 5번에 2의 1, 2, 3 붙이기 => 1 * 3
 * 즉, 1 ~ 5는 4의 모든 케이스 * 3
 *
 * 6. 2의 1번에서 특수타일 2개를 붙인 경우 => 1 * 2
 * 7. 2의 2번에서 특수타일 2개를 붙인 경우 => 1 * 2
 * 8. 2의 3번에서 특수타일 2개를 붙인 경우 => 1 * 2
 * => 즉, 6 ~ 8은 2의 모든 케이스 * 2
 *
 * 9. 타일이 없는 상황에서 첫번째 줄이 1 x 2 3개로 이루어진 특수 타일
 * 10. 타일이 없는 상황에서 마지막 줄이 1 x 2 3개로 이루어진 특수 타일
 *
 * => 즉, 9 ~ 10은 0의 모든 케이스 * 2
 *
 * 41가지
 *
 * 8의 경우
 * 1. 6의 모든 케이스 * 3 => 123
 * 2. 4의 모든 경우의 수에서 4의 특수타일 2개 붙이기, 즉, 4의 모든 케이스 * 2 => 22
 * 3. 2의 모든 경우의 수에 6의 특수타일 2개 붙이기, 즉 2의 모든 케이스 * 2 => 6
 * 4. 첫 줄, 마지막 줄이 4개의 1 x 2 타일로 이루어진 특수 케이스 => 2
 *
 * 153가지
 *
 *
 * 최종 점화식
 * 4 이상의 사례부터는 0에서 현재 길이만큼 증가할 수 있는 특수 타일을 2개씩 가지고 있음
 * 즉 특수 타일 2개에 현재 길이를 붙이는 모든 케이스를 4 이상부터 고려해서 만들어야 함.
 *
 * const caseOfTwo = 3
 * const caseOfSpecialTile = 2
 *
 * -> dp[n] = caseOfTwo * dp[n - 2] + caseOfSpecialTile * (dp[n - 4] + dp[n - 6] + .... dp[0])
 */

if (input % 2 !== 0) {
  console.log(0);
  return;
}

const dp = Array(input + 1).fill(0);
dp[2] = 3;

for (let i = 4; i <= input; i += 2) {
  dp[i] = dp[i - 2] * 3;

  for (let j = 4; j <= i; j += 2) {
    if (i - j === 0) {
      dp[i] += 2;
    } else {
      dp[i] += dp[i - j] * 2;
    }
  }
}

console.log(dp[input]);
